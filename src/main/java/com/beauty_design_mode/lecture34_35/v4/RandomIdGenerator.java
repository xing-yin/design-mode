package com.beauty_design_mode.lecture34_35.v4;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Random;

/**
 * 第四轮重构：添加注释
 * <p>
 * 对于如何写注释，总结一下，主要就是写清楚：做什么、为什么、怎么做、怎么用，对一些边界条件、特殊情况进行说明，以及对函数输入、输出、异常进行说明。
 * <p>
 * Id Generator that is used to Generate random IDs.
 * <p>
 * The IDs generated by this class are not absolutely unique.
 * but the probability of duplication is very low;
 * </p>
 *
 * @author Alan Yin
 * @date 2020/10/15
 */

public class RandomIdGenerator implements IdGenerator {

    /**
     * Generate the random ID.The IDs may be duplicated only in extreme situation.
     *
     * @return an random ID
     */
    @Override
    public String generator() {
        String substrOfHostName = getLastFieldOfHostName();
        long currentTimeMillis = System.currentTimeMillis();
        String randomString = generateRandomAlphameric(8);
        String id = String.format("%s-%d-%s",
                substrOfHostName, currentTimeMillis, randomString);
        return id;
    }

    /**
     * Get the local hostname and
     * extract the last field of the name string split by delimiter '.'
     *
     * @return the last field of hostnam.Return null if hostname is not obtained.
     */
    protected String getLastFieldOfHostName() {
        String substrOfHostName = null;
        try {
            String hostName = InetAddress.getLocalHost().getHostName();
            substrOfHostName = getLastSubstrSplittedByDot(hostName);
            return substrOfHostName;
        } catch (UnknownHostException e) {
            System.out.println("Failed to get the host name." + e);
        }
        return substrOfHostName;
    }

    /**
     * Get the last field of {@hostName} split by delimiter '.'
     *
     * @param hostName hostName should not be null
     * @return the last field of {@hostName}. Returns empty string if {@hostName} is empty string.
     */
    protected String getLastSubstrSplittedByDot(String hostName) {
        String[] tokens = hostName.split("\\.");
        String substrOfHostName = tokens[tokens.length - 1];
        return substrOfHostName;
    }


    /**
     * Generate random string which only contains digits,
     * uppercase letters and lowercase letters
     *
     * @param length length should not be less than 0
     * @return the random string.Return empty string if {@length} is 0
     */
    protected String generateRandomAlphameric(int length) {
        char[] randomChars = new char[length];
        int count = 0;
        Random random = new Random();
        while (count < length) {
            int maxAscii = 'z';
            int randomAscii = random.nextInt(maxAscii);
            boolean isDigit = randomAscii >= '0' && randomAscii <= '9';
            boolean isUppercase = randomAscii >= 'A' && randomAscii <= 'Z';
            boolean isLowwercase = randomAscii >= 'a' && randomAscii <= 'z';
            if (isDigit || isUppercase || isLowwercase) {
                randomChars[count] = (char) randomAscii;
                count++;
            }
        }
        return new String(randomChars);
    }

}
